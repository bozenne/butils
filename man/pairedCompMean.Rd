% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairedCompMean.R
\name{pairedCompMean}
\alias{pairedCompMean}
\title{Permutation Test for the Mean with Paired Data}
\usage{
pairedCompMean(
  data,
  col.treatment,
  col.factor,
  col.value,
  col.cluster,
  n.perm = 1000,
  method.adj = "step-down",
  seed = NULL,
  trace = TRUE
)
}
\arguments{
\item{data}{[data.frame] dataset with in row the samples.}

\item{col.treatment}{[character] column in the dataset indicating the treatment variable, that should be permuted within-individuals.}

\item{col.factor}{[character] column in the dataset indicating the factor variable, to stratify the comparison on.}

\item{col.value}{[character] column in the dataset indicating the value of the measurement.}

\item{n.perm}{[numeric] number of permutation to be performed.}

\item{seed}{[integer,>0] set initial state of the random number generation (passed to \code{set.seed}).}

\item{trace}{[logical] should a progress bar be display displaying the execution of the permutations.}

\item{col.id}{[character] column in the dataset indicating the patient identity.}
}
\description{
Permutation test for comparing mean between within cluster with efficient adjustment for multiple comparisons
}
\details{
Single step max test adjustment is performed to adjust for multiple comparisons. It account for correlation between test statistics.
}
\examples{
library(mvtnorm)
library(reshape2)

## generate data
n <- 25

Sigma1 <- (diag(1-0.5,5,5)+0.5) * tcrossprod(c(1,2,1,2,3))
Sigma2 <- (diag(1-0.5,5,5)+0.5) * tcrossprod(c(1,2,1,2,3))
Sigma3 <- (diag(1-0.5,5,5)+0.5) * tcrossprod(c(1,2,1,2,3))
Sigma <- as.matrix(Matrix::bdiag(Sigma1,Sigma2,Sigma3))+0.25
mu1 <- c(1,2,1,2,1.5)
mu <- c(mu1, mu1+1.5,mu1-1)

set.seed(10)
dfW <- data.frame(1:n,mvtnorm::rmvnorm(n, mean = mu, sigma = Sigma))
colnames(dfW) <- c("id",paste0("score",1:5,"_B"),
                   paste0("score",1:5,"_P"),
                   paste0("score",1:5,"_K"))
dfL <- melt(dfW, id.vars = "id")
dfL$score <- sapply(strsplit(x=as.character(dfL$variable),split="_",fixed = TRUE),"[",1)
dfL$treatment <- sapply(strsplit(x=as.character(dfL$variable),split="_",fixed = TRUE),"[",2)

## test mean
t.test(dfW$score1_P,dfW$score1_B,paired = TRUE)
t.test(dfW$score5_P,dfW$score5_B,paired = TRUE)

if(require(MKinfer)){
perm.t.test(dfW$score1_P,dfW$score1_B,paired = TRUE)
perm.t.test(dfW$score2_P,dfW$score2_B,paired = TRUE)
perm.t.test(dfW$score3_P,dfW$score3_B,paired = TRUE)
perm.t.test(dfW$score4_P,dfW$score4_B,paired = TRUE)
perm.t.test(dfW$score5_P,dfW$score5_B,paired = TRUE)
}

resPerm <- pairedCompMean(dfL[dfL$treatment \%in\% c("P","B"),], n.perm = 1e3,
               col.treatment = "treatment", col.factor = "score", col.value = "value", col.cluster = "id",
               seed = NULL)
resPerm

}
