% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootReg.R
\name{bootReg}
\alias{bootReg}
\alias{bootReg.lm}
\alias{bootReg.gls}
\alias{bootReg.lme}
\alias{bootReg.lvmfit}
\alias{.bootReg}
\title{Perform bootstrap computation on an object}
\usage{
bootReg(object, type, FUN.estimate, FUN.stdError, data, load.library, ...)

\method{bootReg}{lm}(object, type = "coef", FUN.estimate = NULL,
  FUN.stdError = NULL, data = NULL, load.library = NULL, ...)

\method{bootReg}{gls}(object, type = "coef", FUN.estimate = NULL,
  FUN.stdError = NULL, data = NULL, load.library = "nlme", cluster,
  ...)

\method{bootReg}{lme}(object, type = "coef", FUN.estimate = NULL,
  FUN.stdError = NULL, data = NULL, load.library = "nlme", cluster,
  ...)

\method{bootReg}{lvmfit}(object, type = "coef", FUN.estimate = NULL,
  FUN.stdError = NULL, data = NULL, load.library = "lava", ...)

.bootReg(object, data, strata = NULL, name.cluster, FUN.estimate,
  FUN.stdError, FUN.resample = NULL, FUN.iid = NULL, n.boot = 1000,
  n.cpus = 1, load.library, seed = 1, rejectIfWarning = TRUE,
  trace = TRUE)
}
\arguments{
\item{object}{the fitted model.}

\item{type}{the type of test for which the bootstrap should be performed. Can be \code{"coef"}, \code{"anova"}, \code{"publish"}.
Setting type to \code{NULL} enable the use of \code{FUN.estimate} and \code{FUN.stdError}.}

\item{FUN.estimate}{the function used to extract the punctual estimates from the model.}

\item{FUN.stdError}{the function used to extract the standard error associated with the punctual estimate (i.e. standard error of the empirical estimator).}

\item{data}{the data that have been used to fit the model.}

\item{load.library}{additional library to load on each CPU. Useful when performing parallel computation.}

\item{...}{ignored}

\item{cluster}{the variable indicating the level where the sample is i.i.d. Only required for gls with no correlation argument.}

\item{strata}{if not \code{NULL}, a stratified bootstrap is performed according to this variable.}

\item{name.cluster}{internal argument.}

\item{FUN.resample}{the function used simulate new data under the model. Default is \code{NULL} which corresponds to a non-parametric bootstrap.}

\item{FUN.iid}{the function used to extract the influence function from the model.}

\item{n.boot}{the number of replications. Should be a large number.}

\item{n.cpus}{the number of cpu to use.}

\item{seed}{set the random number generator}

\item{rejectIfWarning}{Should the estimate be ignored if a warning is returned by the estimation routine?}

\item{trace}{should the execution of the bootstrap be displayed using a progress bar?}
}
\description{
Perform bootstrap computation for a regression model. Handle one grouping variable.
}
\details{
Bootstrap: randomly select observations (or individuals according to argument var.id) to form a new dataset.
If the same individual appear several times, a different group value is given for each apparition.

When using multiple cores, even though a seed is set to each core, the result may change depending on
how many samples each core is performing.
}
\examples{
#### data  ####
n <- 1e2
set.seed(10)
df.data <- data.frame(Y = rnorm(n),
                     group = gl(3, 5, n, labels = c("Ctl","Trt","Neu")),
                     gender = gl(2, 5, n, labels = c("Female","Male"))[sample.int(n)]
                     )

#### lm ####
m.lm <- lm(Y ~ group*gender, data = df.data)
\dontrun{
resBoot <- bootReg(m.lm, n.boot = 1e4)
}
\dontshow{
resBoot <- bootReg(m.lm, n.boot = 1e2)
}
resBoot
summary(resBoot, type = "norm")
summary(resBoot, type = "basic")
summary(resBoot, type = "stud")
summary(resBoot, type = "perc")
summary(resBoot, type = "bca")

resBoot <- bootReg(m.lm, FUN.resample = "simulate", n.boot = 1e1)
resBoot

#### gls ####
library(nlme)
e.gls <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time),
             data = Ovary, correlation = corAR1(form = ~ 1 | Mare))
resBoot <- bootReg(e.gls, n.boot = 1e1)

#### lme ####
e.lme <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time),
             data = Ovary, random =~ 1 | Mare)
resBoot <- bootReg(e.lme, n.boot = 1e1)

}
